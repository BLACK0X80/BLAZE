struct Rectangle {
    width: f64,
    height: f64,
}

impl Rectangle {
    fn new(width: f64, height: f64) -> Rectangle {
        Rectangle { width, height }
    }
    
    fn area(&self) -> f64 {
        self.width * self.height
    }
    
    fn can_hold(&self, other: &Rectangle) -> bool {
        self.width > other.width && self.height > other.height
    }
}

enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}

fn process_message(msg: Message) {
    match msg {
        Message::Quit => println("Quit"),
        Message::Move { x, y } => println("Move to {}, {}", x, y),
        Message::Write(s) => println("Write: {}", s),
        Message::ChangeColor(r, g, b) => println("Color: {}, {}, {}", r, g, b),
    }
}

fn main() {
    let rect1 = Rectangle::new(30.0, 50.0);
    let rect2 = Rectangle::new(10.0, 40.0);
    
    println("Area: {}", rect1.area());
    println("Can hold rect2: {}", rect1.can_hold(&rect2));
    
    let msg = Message::Write(String::from("Hello"));
    process_message(msg);
}

